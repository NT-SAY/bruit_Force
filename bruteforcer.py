"""
Main bruteforcer class with intelligent attack coordination
"""

import asyncio
import time
import random
import pickle
from pathlib import Path
from typing import List, Optional, Dict, Any
import aiohttp
from aiohttp_socks import ProxyConnector
import logging
from fake_useragent import UserAgent

from .models import AttackType, ProtectionLevel, AttackResult
from ..engines.hash_engine import HashEngine
from ..engines.web_engine import WebEngine
from ..engines.rule_engine import RuleEngine
from ..engines.pattern_matcher import FastPatternMatcher
from ..managers.proxy_manager import ProxyManager
from ..managers.strategy_manager import AdaptiveStrategyManager
from ..managers.rate_limiter import RateLimiter
from ..utils.accelerators import CPUAccelerator, VectorizedHasher
from .estimators import TimeEstimator, IntelligentAdvisor

logger = logging.getLogger(__name__)

class UltimateBruteForcer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ—Ä —Å CPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º"""
    
    def __init__(self, target: str, wordlist: List[str], attack_type: AttackType = AttackType.HASH):
        self.target = target
        self.original_wordlist = wordlist
        self.attack_type = attack_type
        self.wordlist = []
        self.found = False
        self.result = None
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.proxy_manager = ProxyManager()
        self.rule_engine = RuleEngine()
        self.pattern_matcher = FastPatternMatcher()
        self.strategy_manager = AdaptiveStrategyManager()
        self.ua = UserAgent()
        self.rate_limiter = RateLimiter(max_requests_per_second=50.0)
        self.cpu_accelerator = CPUAccelerator()
        self.vector_hasher = VectorizedHasher()
        self.time_estimator = TimeEstimator()
        self.advisor = IntelligentAdvisor()
        
        # –î–≤–∏–∂–∫–∏ –∞—Ç–∞–∫
        self.hash_engine = HashEngine(self.cpu_accelerator, self.vector_hasher)
        self.web_engine = WebEngine(self.proxy_manager, self.pattern_matcher, self.rate_limiter, self.ua)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'attempts': 0,
            'successes': 0,
            'errors': 0,
            'start_time': time.time(),
            'proxy_rotations': 0,
            'current_index': 0
        }
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.current_strategy = {
            'delay': 0.1,
            'concurrency': 50,
            'proxy_rotate': True,
            'user_agent_rotate': True,
            'use_cpu_acceleration': True,
            'batch_size': 1000
        }
    
    def enhance_wordlist(self):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª"""
        logger.info("Enhancing wordlist with rules...")
        
        if len(self.original_wordlist) > 5000:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            self.wordlist = self.rule_engine.parallel_enhance(self.original_wordlist)
        else:
            self.wordlist = self.rule_engine.enhance_wordlist(self.original_wordlist)
        
        logger.info(f"Enhanced wordlist size: {len(self.wordlist)}")
    
    async def setup_proxies(self, proxy_file: str = None, proxy_list: List[str] = None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        self.proxy_manager.load_proxies(proxy_file, proxy_list)
        await self.proxy_manager.verify_all_proxies()
    
    async def hash_attack(self) -> Optional[str]:
        """–ê—Ç–∞–∫–∞ –Ω–∞ —Ö–µ—à —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.current_strategy.get('use_cpu_acceleration', True):
            if len(self.wordlist) > 10000:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                return await self.hash_engine.vectorized_attack(self.target, self.wordlist, self.stats)
            else:
                # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                return await self.hash_engine.batch_attack(self.target, self.wordlist, self.stats)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            return await self.hash_engine.sequential_attack(self.target, self.wordlist, self.stats, self.current_strategy)
    
    async def web_attack(self) -> Optional[str]:
        """–ê—Ç–∞–∫–∞ –Ω–∞ –≤–µ–±-—Ñ–æ—Ä–º—É"""
        return await self.web_engine.attack(
            self.target, 
            self.wordlist, 
            self.stats, 
            self.current_strategy,
            self.adapt_to_protection,
            self.save_progress,
            self.adapt_based_on_stats
        )
    
    def adapt_to_protection(self, protection_strategy: Dict):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–µ"""
        logger.warning(f"Adapting to protection: {protection_strategy}")
        self.current_strategy.update(protection_strategy)
    
    def adapt_based_on_stats(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ based on —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        success_rate = self.stats['successes'] / max(self.stats['attempts'], 1)
        
        if success_rate < 0.1:
            self.current_strategy['delay'] *= 1.5
            self.current_strategy['concurrency'] = max(5, self.current_strategy['concurrency'] - 5)
            logger.info("Reducing speed due to low success rate")
    
    def save_progress(self, filename: str = "progress.pkl"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞—Ç–∞–∫–∏"""
        progress = {
            'attempts': self.stats['attempts'],
            'current_index': self.stats.get('current_index', 0),
            'found': self.found,
            'bad_proxies': list(self.proxy_manager.bad_proxies),
            'timestamp': time.time()
        }
        
        with open(filename, 'wb') as f:
            pickle.dump(progress, f)
        
        logger.info(f"Progress saved: attempts={progress['attempts']}, index={progress['current_index']}")
    
    def load_progress(self, filename: str = "progress.pkl"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞—Ç–∞–∫–∏"""
        if Path(filename).exists():
            try:
                with open(filename, 'rb') as f:
                    progress = pickle.load(f)
                    self.stats['attempts'] = progress['attempts']
                    self.stats['current_index'] = progress['current_index']
                    self.found = progress['found']
                    self.proxy_manager.bad_proxies = set(progress['bad_proxies'])
                logger.info(f"Progress loaded: attempts={progress['attempts']}, index={progress['current_index']}")
            except Exception as e:
                logger.error(f"Failed to load progress: {e}")
    
    async def analyze_attack_feasibility(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏"""
        analysis = {}
        
        if self.attack_type == AttackType.HASH:
            # –û—Ü–µ–Ω–∫–∞ –¥–ª—è hash-–∞—Ç–∞–∫–∏
            estimation = self.time_estimator.estimate_hash_time(
                self.target, len(self.wordlist), 'cpu'
            )
            
            analysis.update(estimation)
            analysis['recommendations'] = self.time_estimator.get_recommendations(
                'hash', estimation['estimated_time'], len(self.wordlist), estimation
            )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            complexity = self.time_estimator._get_complexity_level(len(self.wordlist))
            analysis['recommended_tools'] = self.advisor.recommend_tools(
                'hash', complexity, estimation['estimated_time']
            )
        
        elif self.attack_type == AttackType.WEB:
            # –û—Ü–µ–Ω–∫–∞ –¥–ª—è web-–∞—Ç–∞–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã)
            estimation = self.time_estimator.estimate_web_time(
                self.target, len(self.wordlist), ProtectionLevel.MEDIUM
            )
            
            analysis.update(estimation)
            analysis['recommendations'] = self.time_estimator.get_recommendations(
                'web', estimation['estimated_time'], len(self.wordlist), estimation
            )
        
        return analysis
    
    async def print_attack_analysis(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç–∞–∫–∏"""
        analysis = await self.analyze_attack_feasibility()
        
        print(f"\n{'='*60}")
        print("üéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–°–û–û–ë–†–ê–ó–ù–û–°–¢–ò –ê–¢–ê–ö–ò")
        print(f"{'='*60}")
        
        print(f"üìä –û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã: {analysis.get('total_operations', 0):,} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {analysis.get('formatted_time', 'N/A')}")
        
        if 'operations_per_sec' in analysis:
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {analysis['operations_per_sec']:,.0f} –æ–ø/—Å–µ–∫")
        elif 'requests_per_sec' in analysis:
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {analysis['requests_per_sec']:,.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in analysis.get('recommendations', []):
            print(f"   {rec}")
        
        if 'recommended_tools' in analysis:
            print(f"\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for tool in analysis['recommended_tools'][:3]:  # –¢–æ–ø-3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                print(f"   {tool['name']} (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {tool['effectiveness']}/1.0) - {tool['reason']}")
        
        print(f"{'='*60}")
        
        return analysis
    
    async def run_attack(self) -> AttackResult:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∞—Ç–∞–∫–∏"""
        logger.info(f"üöÄ Starting {self.attack_type.value} attack with CPU acceleration")
        logger.info(f"üìä Wordlist: {len(self.wordlist)} passwords")
        logger.info(f"üåê Proxies: {len(self.proxy_manager.good_proxies)} available")
        logger.info(f"‚ö° Strategy: {self.current_strategy}")
        logger.info(f"üî¢ CPU Workers: {self.cpu_accelerator.max_workers}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("\n" + "="*60)
        print("üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–¢–ê–ö–ò")
        print("="*60)
        analysis = await self.print_attack_analysis()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–æ–µ
        if analysis.get('estimated_time', 0) > 3600:  # –±–æ–ª—å—à–µ 1 —á–∞—Å–∞
            response = input("\nüöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É? (y/n): ")
            if response.lower() != 'y':
                print("–ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return AttackResult(success=False, attempts=0, time_taken=0.0)
        
        start_time = time.time()
        
        try:
            if self.attack_type == AttackType.HASH:
                result = await self.hash_attack()
            elif self.attack_type == AttackType.WEB:
                self.load_progress()
                result = await self.web_attack()
            else:
                raise ValueError(f"Unsupported attack type: {self.attack_type}")
            
            end_time = time.time()
            
            return AttackResult(
                success=result is not None,
                password=result,
                attempts=self.stats['attempts'],
                time_taken=end_time - start_time,
                strategy_used=self.current_strategy.get('name', 'adaptive')
            )
            
        except Exception as e:
            logger.error(f"Attack failed: {e}")
            return AttackResult(success=False, attempts=self.stats['attempts'])
        finally:
            self.save_progress("final_progress.pkl")