"""
Intelligent time estimation and advisory system
"""

import time
from typing import Dict, Any, List
from .models import ProtectionLevel

class TimeEstimator:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    
    def __init__(self):
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫—É–Ω–¥—É)
        self.benchmarks = {
            'hash_md5': {
                'cpu': 5_000_000,    # 5M —Ö–µ—à–µ–π/—Å–µ–∫ –Ω–∞ CPU
                'gpu': 10_000_000_000  # 10B —Ö–µ—à–µ–π/—Å–µ–∫ –Ω–∞ GPU
            },
            'web_request': {
                'direct': 10,        # 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ –Ω–∞–ø—Ä—è–º—É—é
                'proxy': 5,          # 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                'stealth': 2         # 2 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫ –≤ stealth —Ä–µ–∂–∏–º–µ
            },
            'ssh_brute': {
                'default': 50        # 50 –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫
            }
        }
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.password_complexity = {
            'very_weak': 10**4,      # 10^4 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'weak': 10**6,           # 10^6 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π  
            'medium': 10**8,         # 10^8 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'strong': 10**10,        # 10^10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            'very_strong': 10**12    # 10^12 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        }
    
    def estimate_hash_time(self, target_hash: str, wordlist_size: int, 
                          hardware: str = 'cpu') -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è hash-–∞—Ç–∞–∫–∏"""
        speed = self.benchmarks['hash_md5'][hardware]
        total_operations = wordlist_size
        
        time_seconds = total_operations / speed
        time_human = self._format_time(time_seconds)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'operations_per_sec': speed,
            'total_operations': total_operations,
            'hardware_used': hardware
        }
    
    def estimate_web_time(self, target_url: str, wordlist_size: int,
                         protection_level: ProtectionLevel) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è web-–∞—Ç–∞–∫–∏"""
        speed_map = {
            ProtectionLevel.NONE: self.benchmarks['web_request']['direct'],
            ProtectionLevel.WEAK: self.benchmarks['web_request']['direct'] * 0.5,
            ProtectionLevel.MEDIUM: self.benchmarks['web_request']['proxy'],
            ProtectionLevel.STRONG: self.benchmarks['web_request']['proxy'] * 0.3,
            ProtectionLevel.VERY_STRONG: self.benchmarks['web_request']['stealth']
        }
        
        speed = speed_map[protection_level]
        total_operations = wordlist_size
        time_seconds = total_operations / speed
        time_human = self._format_time(time_seconds)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'requests_per_sec': speed,
            'total_requests': total_operations,
            'protection_level': protection_level.name
        }
    
    def estimate_brute_force_time(self, charset: str, max_length: int,
                                 hardware: str = 'cpu') -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è brute force –∞—Ç–∞–∫–∏"""
        total_combinations = 0
        for length in range(1, max_length + 1):
            total_combinations += len(charset) ** length
        
        speed = self.benchmarks['hash_md5'][hardware]
        time_seconds = total_combinations / speed
        time_human = self._format_time(time_seconds)
        
        complexity = self._get_complexity_level(total_combinations)
        
        return {
            'estimated_time': time_seconds,
            'formatted_time': time_human,
            'total_combinations': total_combinations,
            'complexity_level': complexity,
            'feasible': time_seconds < 2592000  # 30 –¥–Ω–µ–π
        }
    
    def get_recommendations(self, attack_type: str, estimated_time: float,
                           wordlist_size: int, context: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π based on –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        recommendations = []
        
        if estimated_time > 2592000:  # > 30 –¥–Ω–µ–π
            recommendations.append("‚ùå –í–∑–ª–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è")
            recommendations.extend(self._get_alternative_approaches(attack_type, context))
        
        elif estimated_time > 86400:  # > 1 –¥–µ–Ω—å
            recommendations.append("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
            recommendations.extend(self._get_optimization_tips(attack_type, context))
        
        elif estimated_time > 3600:  # > 1 —á–∞—Å
            recommendations.append("‚è≥ –ó–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            recommendations.extend(self._get_optimization_tips(attack_type, context))
        
        else:
            recommendations.append("‚úÖ –í–∑–ª–æ–º feasible - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if attack_type == 'hash':
            recommendations.extend(self._get_hardware_recommendations(context))
        
        return recommendations
    
    def _get_alternative_approaches(self, attack_type: str, context: Dict) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
        alternatives = []
        
        if attack_type == 'hash':
            alternatives.extend([
                "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Hashcat —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º",
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–¥—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã",
                "üîß –ò—â–∏—Ç–µ —É—Ç–µ—á–∫–∏ –ø–∞—Ä–æ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é"
            ])
        
        elif attack_type == 'web':
            alternatives.extend([
                "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                "üîß –ò—â–∏—Ç–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞",
                "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏—à–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
            ])
        
        return alternatives
    
    def _get_optimization_tips(self, attack_type: str, context: Dict) -> List[str]:
        """–°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        tips = []
        
        if attack_type == 'hash':
            tips.extend([
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Hashcat –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è",
                "‚ö° –î–æ–±–∞–≤—å—Ç–µ –º–∞—Å–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∞—Ä–æ–ª–µ–π",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å (—É–±–µ—Ä–∏—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)"
            ])
        
        elif attack_type == 'web':
            tips.extend([
                "‚ö° –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫",
                "‚ö° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏",
                "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é User-Agent"
            ])
        
        return tips
    
    def _get_hardware_recommendations(self, context: Dict) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é"""
        recommendations = []
        
        if context.get('estimated_time_cpu', 0) > 3600:
            recommendations.extend([
                "üíª –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPU (NVIDIA RTX 4090)",
                "üíª –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ GPU —Å–µ—Ä–≤–∏—Å—ã (AWS, GCP)",
                "üíª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
            ])
        
        return recommendations
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds:.1f} —Å–µ–∫—É–Ω–¥"
        elif seconds < 3600:
            return f"{seconds/60:.1f} –º–∏–Ω—É—Ç"
        elif seconds < 86400:
            return f"{seconds/3600:.1f} —á–∞—Å–æ–≤"
        elif seconds < 2592000:
            return f"{seconds/86400:.1f} –¥–Ω–µ–π"
        else:
            return f"{seconds/2592000:.1f} –º–µ—Å—è—Ü–µ–≤"
    
    def _get_complexity_level(self, combinations: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if combinations < self.password_complexity['very_weak']:
            return "very_weak"
        elif combinations < self.password_complexity['weak']:
            return "weak"
        elif combinations < self.password_complexity['medium']:
            return "medium"
        elif combinations < self.password_complexity['strong']:
            return "strong"
        else:
            return "very_strong"

class IntelligentAdvisor:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.tools_db = {
            'hashcat': {
                'type': 'hash',
                'speed': 'very_high',
                'hardware': 'gpu',
                'best_for': ['md5', 'sha1', 'ntlm', 'wpa'],
                'complexity': ['medium', 'strong', 'very_strong']
            },
            'john': {
                'type': 'hash',
                'speed': 'high', 
                'hardware': 'cpu',
                'best_for': ['zip', 'pdf', 'ssh', 'rar'],
                'complexity': ['weak', 'medium']
            },
            'hydra': {
                'type': 'network',
                'speed': 'medium',
                'hardware': 'cpu',
                'best_for': ['http', 'ftp', 'ssh', 'smb'],
                'complexity': ['very_weak', 'weak']
            },
            'medusa': {
                'type': 'network', 
                'speed': 'medium',
                'hardware': 'cpu',
                'best_for': ['web', 'database', 'ssh'],
                'complexity': ['very_weak', 'weak']
            }
        }
    
    def recommend_tools(self, attack_type: str, complexity: str, 
                       estimated_time: float) -> List[Dict]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ based on –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        recommended = []
        
        for tool_name, tool_info in self.tools_db.items():
            if (tool_info['type'] == attack_type and 
                complexity in tool_info['complexity']):
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                effectiveness = self._calculate_effectiveness(
                    tool_info, complexity, estimated_time
                )
                
                recommended.append({
                    'name': tool_name,
                    'effectiveness': effectiveness,
                    'reason': f"–û–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è {complexity} —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                    'speed': tool_info['speed']
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        recommended.sort(key=lambda x: x['effectiveness'], reverse=True)
        return recommended
    
    def _calculate_effectiveness(self, tool_info: Dict, complexity: str, 
                               estimated_time: float) -> float:
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        effectiveness = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞
        speed_weights = {'very_high': 1.0, 'high': 0.8, 'medium': 0.6, 'low': 0.4}
        complexity_weights = {'very_weak': 0.2, 'weak': 0.4, 'medium': 0.6, 'strong': 0.8, 'very_strong': 1.0}
        
        effectiveness += speed_weights.get(tool_info['speed'], 0.5)
        effectiveness += complexity_weights.get(complexity, 0.5)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ based on –≤—Ä–µ–º–µ–Ω–∏
        if estimated_time > 86400:  # > 1 –¥–Ω—è
            effectiveness *= 1.5 if tool_info['speed'] == 'very_high' else 0.8
        
        return round(effectiveness, 2)